{"name":"Boids","tagline":"Boids simulation","body":"\r\n#Documentation\r\n\r\n##Problem Description\r\nName: Boids Simulation\r\n\r\nProblem Statement: Boids is an artificial intelligence so they will making decision depend on this 3 rules are cohesion, alignment, and separation.\r\n\r\nProblem Specification: Calculate average distance of boids for cohesion. Calculate average velocity of boids exxcept itself for alignment. Calculate distance between the boids for seperation.\r\n\r\n##User Interface Information\r\n\r\nName: Cohesion\r\nDescription: Boids center of mass. The average distance of all the boid\r\n\r\nName: Alignment\r\nDescription: The average of boids velocity\r\n\r\nName: Seperation\r\nDescription: A distance that boids will maintain from each others\r\n\r\nName: Exit\r\nDescription: Quit the aplication\r\n\r\nName: Resest Sliders\r\nDescription: reset Cohension, Alignment, and Seperation back to their default value\r\n\r\nName: Target\r\nDescription: when the check box is check all the boids will move toward the target\r\n\r\n##Functions Information\r\n\r\nFile: BoidStat.cs\r\nClass: BoidStat\r\nData members:\r\n\tName: Velocity\r\n\tDescription: boid speed over time\r\n\r\nFunction: Start\r\nParameters: n/a\r\nDescription: Set Velocity to some random value\r\nReturn: n/a\r\n\r\nFile: BoidsAlgorimth.cs\r\nClass: BoidsAlgorimth\r\nData members:\r\n\tName: fishgold\r\n\tDescription: a list of gameobject to hold gameobject when it instantiate\r\n\r\n\tName: count\r\n\tDescription: an interger to how many boid that need to be instantiate\r\n\r\n\tName: BoidPreb\r\n\tDescription: a gameobject that will use to spawn boids\r\n\r\n\tName: TargetPreb\r\n\tDescription: a gameobject that will use to spawn a target for boids\r\n\r\n\tName: cohesion_inc\r\n\tDescription: slider for user interface\r\n\r\n\tName: alignment_inc\r\n\tDescription: slider for user interface\r\n\r\n\tName: seperation_inc\r\n\tDescription: slider for user interface\r\n\r\n\tName: position\r\n\tDescription: use pos to give boid a random position when its spawn\r\n\r\n\tName: v1\r\n\tDescription: use this vector to store cohension value after calculation\r\n\r\n\tName: v2\r\n\tDescription: use this vector to store seperation value after calculation\r\n\r\n\tName: v3\r\n\tDescription: use this vector to store alignment value after calculation\r\n\r\n\tName: v4\r\n\tDescription: use this vector to store bounding box value after calculation\r\n\r\n\tName: pcj\r\n\tDescription: use pcj to store the value of center of mass calculation\r\n\r\n\tName: pvj\r\n\tDescription: use pvj to store the value of boids average velocity except itself\r\n\r\n\tName: force\r\n\tDescription: use this vector to change boids position to opposite direction when \r\n\tthey hit the box limit\r\n\r\n\tName: limitedVelocity\r\n\tDescription: use this float to limited boid Velocity so its won't go too fast\r\n\r\n\tName: boidsgui\r\n\tDescription: access BoidsGUI class components\r\n\r\nFunction: Start\r\nParameters: n/a\r\nDescription: spawn boids\r\nReturn: n/a\r\n\r\nFunction: Update\r\nParameters: n/a\r\nDescription: update boids position to a new position every frame.\r\nReturn: n/a\r\n\r\nFunction: limited_velocity\r\nParameters: GameObject myFish\r\nDescription: limited boids velocity when their velocity go over a certain value that is giving.\r\nReturn: n/a\r\n\r\nFunction: ExitButton\r\nParameters: n/a\r\nDescription: quit application \r\nReturn: n/a\r\n\r\nFunction: move_all_boids_to_new_position\r\nParameters: n/a\r\nDescription: all the calculation are call within this function to update boids position\r\nReturn: n/a\r\n\r\nFunction: bounding_box\r\nParameters: GameObject currentFish\r\nDescription: there are limited space where boids can go. This is to make the boids won't go too far away and just stay within a certain space that is giving.\r\nReturn: Vector3 force\r\n\r\nFunction: cohesion\r\nParameters: GameObject myFish\r\nDescription: calculate boids center of mass which is their distance average.\r\nReturn: Vector3\r\n\r\nFunction: seperation\r\nParameters: GameObject myFish\r\nDescription: there are certain distance that each boid have for each other so they won't go on top of each other. This function calculate the distance that they need to be away from each other.\r\nReturn: Vector3\r\n\r\nFunction: alignment\r\nParameters: GameObject myFish\r\nDescription: All the boids will try to match each other velocity. This function calculate boids average velocity.\r\nReturn: Vector3\r\n\r\nFile: BoidsGUI\r\nClass: BoidsGUI\r\nData members\r\n\tName: Cohesion\r\n\tDescription: a slider for user input\r\n\r\n\tName: Alignment\r\n\tDescription: a slider for user input\r\n\r\n\tName: Seperation\r\n\tDescription: a slider for user input\r\n\r\n\tName: Exit\r\n\tDescription: a button to click when user want to quit the application\r\n\r\n\tName: ResetSliders\r\n\tDescription: a button to reset all the sliders back to the default value\r\n\r\n\tName: cohesion\r\n\tDescription: a float to store Cohesion slider value\r\n\r\n\tName: alignment\r\n\tDescription: a float to store Alignment slider value\r\n\r\n\tName: seperation\r\n\tDescription: a float to store Seperation slider value\r\n\r\n\tName: Target\r\n\tDescription: a boolean for user input\r\n\r\nFunction: Start\r\nParameters: n/a\r\nDescription: Set all the GUI elements position base on the screen resolution, and active all the GUI elements that need to appear from the start\r\nReturn: n/a\r\n\r\nFunction: ResetSlider\r\nParameters: n/a\r\nDescription: set all the sliders value back to their default value\r\nReturn: n/a\r\n\r\n##Implementation\r\n\r\nFile: BoidStat.cs\r\nusing UnityEngine;\r\nusing System.Collections;\r\n\r\nFunction: Start\r\nParameters: n/a\r\nDescription: Set Velocity to some random value\r\nReturn: n/a\r\nvoid Start()\r\n{\r\n   velocity = new Vector3(Random.Range(0.2f, -0.2f), Random.Range(0.5f, -0.2f), \t\t\t\t\t\t\t\tRandom.Range(0.2f, -0.20f));\r\n}\r\nFile: BoidsAlgorimth.cs\r\nusing UnityEngine;\r\nusing System.Collections;\r\nusing System.Collections.Generic;\r\n\r\nFunction: Start\r\nParameters: n/a\r\nDescription: spawn boids\r\nReturn: n/a\r\nvoid Start()\r\n{\r\n    limitedVelocity = 0.1f;\r\n    for (int i = 0; i < count; ++i) \r\n    {\r\n        GameObject fish;\r\n        pos = new Vector3(Random.Range(10.0f, -10.0f), Random.Range(1.5f, \t\t\t\t\t\t10.0f), Random.Range(10.0f, -10.0f));\r\n        fish = Instantiate(spawnfish) as GameObject;\r\n        fish.transform.position = pos;\r\n        fish.transform.parent = gameObject.transform;\r\n        fishgold.Add(fish);\r\n    }\r\n\r\n }\r\n\r\nFunction: Update\r\nParameters: n/a\r\nDescription: update boids position to a new position every frame\r\nReturn: n/a\r\nvoid Update()\r\n{\r\n    move_all_boids_to_new_position();\r\n}\r\n\r\nFunction: limited_velocity\r\nParameters: GameObject myFish\r\nDescription: limited boids velocity when their velocity go over a certain value that is giving \r\nReturn: n/a\r\nvoid limited_velocity(GameObject myFish) // they wont move too fast\r\n{\r\n    if (myFish.GetComponent<BoidStat>().velocity.magnitude > limitedVelocity)\r\n    {\r\n        myFish.GetComponent<BoidStat>().velocity = \t\t\t\t\t \t\tmyFish.GetComponent<BoidStat>().velocity.normalized * 0.25f;\r\n    }\r\n}\r\n\r\nFunction: ExitButton\r\nParameters: n/a\r\nDescription: quit application \r\nReturn: n/a\r\npublic void ExitButton()\r\n{\r\n    Application.Quit();\r\n}\r\n\r\nFunction: move_all_boids_to_new_position\r\nParameters: n/a\r\nDescription: all the calculation are call within this function to update boids position\r\nReturn: n/a\r\nvoid move_all_boids_to_new_position()\r\n{\r\n    foreach(GameObject myFish in fishgold)\r\n    {\r\n        v1 = cohesion  (myFish) * cohension_inc.value * 0.1f;\r\n        v2 = seperation(myFish) * seperation_inc.value * 0.1f;\r\n        v3 = alignment (myFish) * alignment_inc.value * 0.1f;\r\n        v4 = bounding_box(myFish) * 0.01f;\r\n\r\n        myFish.GetComponent<BoidStat>().velocity = \r\n\t\tmyFish.GetComponent<BoidStat>().velocity + v1 + v2 + v3 + v4;\r\n        myFish.GetComponent<BoidStat>().transform.up = \t\t\t\t \t\tmyFish.GetComponent<BoidStat>().velocity.normalized;\r\n        limited_velocity(myFish);\r\n        myFish.transform.position += myFish.GetComponent<BoidStat>().velocity;\r\n\r\n     }\r\n}\r\n\r\nFunction: bounding_box\r\nParameters: GameObject currentFish\r\nDescription: there are limited space where boids can go. This is to make the boids won't go too far away and just stay within a certain space that is giving\r\nReturn: Vector3 force\r\nVector3 bounding_box(GameObject currentFish)\r\n{\r\n    Vector3 fish_position = currentFish.transform.position;\r\n        \r\n    if (fish_position.x < xmin)      { force.x = xmin - fish_position.x; }\r\n    else if (fish_position.x > xmax) { force.x = xmax - fish_position.x; }\r\n\r\n    if (fish_position.y < ymin)      { force.y = ymin - fish_position.y; }\r\n    else if (fish_position.y > ymax) { force.y = ymax - fish_position.y; }\r\n\r\n    if (fish_position.z < zmin)      { force.z = zmin - fish_position.z; }\r\n    else if (fish_position.z > zmax) { force.z = zmax - fish_position.z; }\r\n\r\n    return force;\r\n}\r\n\r\nFunction: cohesion\r\nParameters: GameObject myFish\r\nDescription: calculate boids center of mass which is their distance average\r\nReturn: Vector3\r\nVector3 cohesion(GameObject myFish) \r\n{\r\n    if (Bigfish && boidsgui.Target.isOn == true)\r\n    {\r\n        return (Bigfish.transform.position - myFish.transform.position) / 100; \r\n    }\r\n\r\n    else foreach (GameObject f in fishgold)\r\n    {\r\n        if (f != myFish)\r\n        { pcj += f.transform.position; }\r\n    }\r\n\r\n    pcj = pcj / (fishgold.Count - 1);\r\n    return (pcj - myFish.transform.position) / 100;\r\n}\r\n\r\nFunction: seperation\r\nParameters: GameObject myFish\r\nDescription: there are certain distance that each boid have for each other so they won't go on top of each other. This function calculate the distance that they need to be away from each other\r\nReturn: Vector3\r\nVector3 seperation(GameObject myFish) \r\n{\r\n    Vector3 displacement = new Vector3(0,0,0);\r\n\r\n    foreach (GameObject f in fishgold)\r\n    {\r\n        if (f != myFish)\r\n        {\r\n            if (Vector3.Distance(f.transform.position, \t\t\t \t\t\t\t\t\t\tmyFish.transform.position) < 6) \r\n            { displacement = displacement - (f.transform.position - \t\t\t\t \t\t\t\t\tmyFish.transform.position); }\r\n         }\r\n     }\r\n\r\n     return displacement;\r\n}\r\n\r\nFunction: alignment\r\nParameters: GameObject myFish\r\nDescription: All the boids will try to match each other velocity. This function calculate boids average velocity. \r\nReturn: Vector3\r\nVector3 alignment(GameObject myFish)\r\n{\r\n    foreach (GameObject f in fishgold)\r\n    {\r\n        if (f != myFish)\r\n        { pvj += f.GetComponent<BoidStat>().velocity; }\r\n    }\r\n\r\n    pvj = pvj / (fishgold.Count - 1);\r\n    return (pvj - myFish.GetComponent<BoidStat>().velocity) / 8;\r\n}\r\n\r\nFile: BoidsGUI\r\nusing UnityEngine;\r\nusing System.Collections;\r\nusing UnityEngine.UI;\r\n\r\nFunction: Start\r\nParameters: n/a\r\nDescription: Set all the GUI elements position base on the screen resolution, and active all the GUI elements that need to appear from the start\r\nReturn: n/a\r\nvoid Start()\r\n{\r\n    Cohesion.GetComponent<RectTransform>().position = \r\n\t\t\tnew Vector3(Screen.width *0.5f, Screen.height * 0.1f, 0);\r\n    Alignment.GetComponent<RectTransform>().position = \r\n\t\t\tnew Vector3(Screen.width * 0.2f, Screen.height * 0.1f, 0);\r\n    Seperation.GetComponent<RectTransform>().position = \r\n\t\t\tnew Vector3(Screen.width * 0.8f, Screen.height * 0.1f, 0);\r\n    Exit.GetComponent<RectTransform>().position = \r\n\t\t\tnew Vector3(Screen.width * 0.8f, Screen.height * 0.95f, 0);\r\n    ResetSliders.GetComponent<RectTransform>().position = \r\n\t\t\tnew Vector3(Screen.width * 0.2f, Screen.height * 0.95f, 0);\r\n    Target.GetComponent<RectTransform>().position = \r\n\t\t\tnew Vector3(Screen.width *0.5f, Screen.height * 0.95f, 0);\r\n\r\n\r\n    cohesion = Cohension.value;\r\n    alignment = Alignment.value;\r\n    seperation = Seperation.value;\r\n\r\n    Cohesion.gameObject.SetActive(true);\r\n    Alignment.gameObject.SetActive(true);\r\n    Seperation.gameObject.SetActive(true);\r\n    Exit.gameObject.SetActive(true);\r\n    ResetSliders.gameObject.SetActive(true);\r\n}\r\n\r\nFunction: ResetSlider\r\nParameters: n/a\r\nDescription: set all the sliders value back to their default value\r\nReturn: n/a\r\n\r\npublic void ResetSlider()\r\n{\r\n    Cohesion.value = cohesion;\r\n    Alignment.value = alignment;\r\n    Seperation.value = seperation;\r\n}\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}